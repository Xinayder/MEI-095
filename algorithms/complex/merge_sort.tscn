[gd_scene load_steps=2 format=3 uid="uid://oqd84gj5i5pg"]

[ext_resource type="Script" path="res://merge_sort.gd" id="1_n5ngj"]

[node name="Control" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_n5ngj")

[node name="ReturnButton" type="Button" parent="."]
layout_mode = 1
anchors_preset = 2
anchor_top = 1.0
anchor_bottom = 1.0
offset_left = 10.0
offset_top = -52.0
offset_right = 210.0
offset_bottom = -20.0
grow_vertical = 0
text = "Return to menu
"

[node name="RunButton" type="Button" parent="."]
custom_minimum_size = Vector2(200, 32)
layout_mode = 1
offset_left = 250.0
offset_top = 20.0
offset_right = 450.0
offset_bottom = 52.0
text = "Run step"

[node name="ReadButton" type="Button" parent="."]
custom_minimum_size = Vector2(200, 32)
layout_mode = 1
offset_left = 250.0
offset_top = 70.0
offset_right = 450.0
offset_bottom = 102.0
text = "Read more
"

[node name="OptionsButton" type="MenuButton" parent="."]
custom_minimum_size = Vector2(200, 32)
layout_mode = 1
offset_left = 475.0
offset_top = 20.0
offset_right = 675.0
offset_bottom = 52.0
text = "Options
"
flat = false
item_count = 6
popup/item_0/text = "Regenerate values"
popup/item_0/id = 0
popup/item_1/text = "Reset"
popup/item_1/id = 1
popup/item_2/text = "Property"
popup/item_2/id = 2
popup/item_2/separator = true
popup/item_3/text = "Even numbers"
popup/item_3/checkable = 1
popup/item_3/id = 3
popup/item_3/disabled = true
popup/item_4/text = "Odd numbers"
popup/item_4/checkable = 1
popup/item_4/id = 4
popup/item_4/disabled = true
popup/item_5/text = "Prime numbers"
popup/item_5/checkable = 1
popup/item_5/id = 5
popup/item_5/disabled = true

[node name="PseudocodeLabel" type="RichTextLabel" parent="."]
layout_mode = 0
offset_left = 250.0
offset_top = 120.0
offset_right = 705.0
offset_bottom = 580.0
theme_override_font_sizes/normal_font_size = 14
text = "function MergeSort
	int q, i, j;
	for i = 1 to N and j = 1 to M do
		if A(i) < B(j) then C(q) = A(i); i = i + 1
		if A(i) = B(j) then C(q) = A(i); i = i + 1; j = j + 1
		if A(i) > B(j) then C(q) = B(j); j = j + 1
		q = q + 1
	end

	for i = 1 to N do
		q = q + 1
		C(q) = A(i)
	end

	for j = 1 to M do
		q = q + 1
		C(q) = B(j)
	end
end"

[node name="InfoLabel" type="RichTextLabel" parent="."]
layout_mode = 0
offset_left = 10.0
offset_top = 440.0
offset_right = 465.0
offset_bottom = 540.0
text = "max = 0 
Selected property:"

[node name="HelpLabel" type="RichTextLabel" parent="."]
layout_mode = 0
offset_left = 10.0
offset_top = 608.0
offset_right = 710.0
offset_bottom = 668.0
bbcode_enabled = true
text = "[b][color=orange]NOTE:[/color][/b] The selected element will be highlighted in [color=red]RED[/color]. If the element matches the specified condition, it will be highlighted in [color=lime]LIME[/color]."

[node name="DescriptionDialog" type="AcceptDialog" parent="."]
disable_3d = true
title = "Algorithm description"
position = Vector2i(20, 40)
size = Vector2i(680, 660)
mode = 3
transient = false
unresizable = true
always_on_top = true
popup_window = true
min_size = Vector2i(680, 660)
dialog_autowrap = true

[node name="RichTextLabel" type="RichTextLabel" parent="DescriptionDialog"]
offset_left = 8.0
offset_top = 8.0
offset_right = 672.0
offset_bottom = 611.0
text = "We have one N and one M element structured series (A and B). Put the elements into series C! Series C also has to be structured.

Solution: First, we take the first element from both series and compare them. If the first element of A is smaller than the first element of series B, then the element from A will be the first element of series C, then we go to the next one in series A. If the element in A and B are equal then it doesnâ€™t matter which one you put into series C. We do this comparing procedure until one of the series ends. After this, the elements from the other series must be copied to series C.

Example: Series A: 2, 4, 5, 7
Series B: 3, 4, 5, 9, 12
The number of elements at the start: 0
The number of elements of series A (N): 4
The number of elements of series B (M): 5
Series C is empty

Loop until I<=N and J<=M
DB:=DB+1;
Branch
If A(I)<B(J) then C(DB):=A(I); I:=I+1;
If A(I)=B(J) then C(DB):=A(I); I:=I+1; J:=J+1;
If A(I)>B(J) then C(DB):=B(J); J:=J+1;
End of branch
End of loop

Proceeding the loop for the first time:
i=1, j=1; => 1<=4 and 1<=5
DB:=DB+1 =>DB:=0+1 => DB:=1;
2<3  (A(I)<B(J)) => C(DB):=A(I) => C(1):=2 => series C=2   I:=I+1 => I:=1+1 => I:=2

Proceeding the loop for the second time:
i=2, j=1; => 2<=4 and 1<=5
DB:=DB+1 =>DB:=1+1 => DB:=2;
4>3  (A(I)>B(J)) => C(DB):=B(J) => C(2):=3 => series C=2, 3   J:=J+1 => J:=1+1 => J:=2

Proceeding the loop for the third time:
i=2, j=2; => 2<=4 and 2<=5
DB:=DB+1 =>DB:=2+1 => DB:=3;
4=4  (A(I)=B(J)) => C(DB):=A(I) => C(3):=4 => series C=2, 3, 4   I:=I+1 => I:=2+1 => I:=3
 J:=J+1 => J:=2+1 => J:=3

Proceeding the loop for the fourth time:
i=3, j=3; => 3<=4 and 3<=5
DB:=DB+1 =>DB:=3+1 => DB:=4;
5=5  (A(I)=B(J)) => C(DB):=A(I) => C(4):=5 => series C=2, 3, 4, 5   I:=I+1 => I:=3+1 => I:=4
J:=J+1 => J:=3+1 => J:=4

Proceeding the loop for the fifth time:
i=4; j=4; => 4<=4 and 4<=5
DB:=DB+1 =>DB:=4+1 => DB:=5;
7<9  (A(I)<B(J)) => C(DB):=A(I) => C(5):=7 => series C=2, 3, 4, 5, 7   I:=I+1 => I:=4+1 => I:=5

Proceeding the loop again I<=N is false, because (5<=4)=false => proceeding the loop ends

The rest of the elements of B must be copied to series C."
